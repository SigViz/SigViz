# .github/workflows/deploy.yml

name: Build and Deploy to GitHub Pages (Manual Docker Method)

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Check out the source code. This makes it available in the runner.
      - name: Checkout Source Repo
        uses: actions/checkout@v4

      # Step 2: Manually start the Emscripten Docker container in the background.
      # This is the equivalent of the 'before_install' step in the Travis CI example.
      # The -v flag maps your project directory into the container's /src directory.
      - name: Start the Emscripten Container
        run: |
          docker run -dit --name emscripten \
            -v $GITHUB_WORKSPACE:/src \
            trzeci/emscripten:sdk-incoming-64bit bash

      # Step 3: Build the project by executing a command inside the running container.
      # This is the equivalent of the 'script' step in the Travis CI example.
      - name: Build Project Inside Container
        run: |
          docker exec emscripten \
            bash -c "cd /src && emcc -o app.html src/*.c \
            -Wall -s USE_SDL=2 -s USE_SDL_TTF=2 \
            --preload-file assets@assets -s ALLOW_MEMORY_GROWTH"

      # Step 4: Deploy the build files to Repo B.
      # This step is the same as before, as the build files were created in the shared directory.
      - name: Push to Deployment Repo
        run: |
          git clone "https://x-access-token:${{ secrets.SigViz }}@github.com/SigViz/sigviz.github.io.git" deploy_repo
          cd deploy_repo
          cp ../app.html ../app.js ../app.wasm ../app.data .
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          if ! git diff --staged --quiet; then
            git commit -m "Automated deployment from source repo"
            git push
          else
            echo "No changes to deploy."
          fi